{
  "api/Supabase.Postgrest.Attributes.ColumnAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.ColumnAttribute.html",
    "title": "Class ColumnAttribute | postgrest-csharp",
    "keywords": "Class ColumnAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to map a C# property to a Postgrest Column. [AttributeUsage(AttributeTargets.Property)] public class ColumnAttribute : Attribute Inheritance object Attribute ColumnAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples class User : BaseModel { [ColumnName(\"firstName\")] public string FirstName {get; set;} } Constructors ColumnAttribute(string?, NullValueHandling, bool, bool) public ColumnAttribute(string? columnName = null, NullValueHandling nullValueHandling = NullValueHandling.Include, bool ignoreOnInsert = false, bool ignoreOnUpdate = false) Parameters columnName string nullValueHandling NullValueHandling ignoreOnInsert bool ignoreOnUpdate bool Properties ColumnName The name in postgres of this column. public string ColumnName { get; } Property Value string IgnoreOnInsert If the performed query is an Insert or Upsert, should this value be ignored? public bool IgnoreOnInsert { get; } Property Value bool IgnoreOnUpdate If the performed query is an Update, should this value be ignored? public bool IgnoreOnUpdate { get; } Property Value bool NullValueHandling Specifies what should be serialized in the event this column's value is NULL public NullValueHandling NullValueHandling { get; set; } Property Value NullValueHandling"
  },
  "api/Supabase.Postgrest.Attributes.PrimaryKeyAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.PrimaryKeyAttribute.html",
    "title": "Class PrimaryKeyAttribute | postgrest-csharp",
    "keywords": "Class PrimaryKeyAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to map a C# property to a Postgrest PrimaryKey. [AttributeUsage(AttributeTargets.Property)] public class PrimaryKeyAttribute : Attribute Inheritance object Attribute PrimaryKeyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples class User : BaseModel { [PrimaryKey(\"id\")] public string Id {get; set;} } Constructors PrimaryKeyAttribute(string?, bool) public PrimaryKeyAttribute(string? columnName = null, bool shouldInsert = false) Parameters columnName string shouldInsert bool Properties ColumnName public string ColumnName { get; } Property Value string ShouldInsert Would be set to false in the event that the database handles the generation of this property. public bool ShouldInsert { get; } Property Value bool"
  },
  "api/Supabase.Postgrest.Attributes.ReferenceAttribute.JoinType.html": {
    "href": "api/Supabase.Postgrest.Attributes.ReferenceAttribute.JoinType.html",
    "title": "Enum ReferenceAttribute.JoinType | postgrest-csharp",
    "keywords": "Enum ReferenceAttribute.JoinType Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Specifies the Join type on this reference. PostgREST only allows for a LEFT join and an INNER join. public enum ReferenceAttribute.JoinType Fields Inner = 0 INNER JOIN: returns rows when there is a match on both the source and the referenced tables. Left = 1 LEFT JOIN: returns all rows from the source table, even if there are no matches in the referenced table"
  },
  "api/Supabase.Postgrest.Attributes.ReferenceAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.ReferenceAttribute.html",
    "title": "Class ReferenceAttribute | postgrest-csharp",
    "keywords": "Class ReferenceAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to specify that a foreign key relationship exists in PostgreSQL See: https://postgrest.org/en/stable/api.html#resource-embedding [AttributeUsage(AttributeTargets.Property)] public class ReferenceAttribute : Attribute Inheritance object Attribute ReferenceAttribute Inherited Members Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReferenceAttribute(Type, JoinType, bool, string, string?) Establishes a reference between two tables public ReferenceAttribute(Type model, ReferenceAttribute.JoinType joinType, bool includeInQuery = true, string columnName = \"\", string? foreignKey = null) Parameters model Type Model referenced joinType ReferenceAttribute.JoinType Specifies the join type for this relationship includeInQuery bool Should referenced be included in queries? columnName string Column this attribute references as specified in Postgres, DOES NOT need to be set if <see cref=\"ForeignKey\"/> is set. foreignKey string Foreign Key this attribute references as specified in Postgres (only required if the model references the same table multiple times) Exceptions Exception ReferenceAttribute(Type, bool, bool, string?, string?) Establishes a reference between two tables public ReferenceAttribute(Type model, bool includeInQuery = true, bool useInnerJoin = true, string? columnName = null, string? foreignKey = null) Parameters model Type Model referenced includeInQuery bool Should referenced be included in queries? useInnerJoin bool As to whether the query will filter top-level rows. columnName string Column this attribute references as specified in Postgres, DOES NOT need to be set if ForeignKey is set. foreignKey string Foreign Key this attribute references as specified in Postgres (only required if the model references the same table multiple times) Exceptions Exception Properties ColumnName Column this attribute references as specified in Postgres, DOES NOT need to be set if ForeignKey is set. public string? ColumnName { get; } Property Value string Columns Columns that exist on the model we will select from. public List<string> Columns { get; } Property Value List<string> ForeignKey The explicit SQL defined foreign key that this references. public string? ForeignKey { get; } Property Value string IgnoreOnInsert If the performed query is an Insert or Upsert, should this value be ignored? (DEFAULT TRUE) public bool IgnoreOnInsert { get; } Property Value bool IgnoreOnUpdate If the performed query is an Update, should this value be ignored? (DEFAULT TRUE) public bool IgnoreOnUpdate { get; } Property Value bool IncludeInQuery If Reference should automatically be included in queries on this reference. (DEFAULT TRUE) public bool IncludeInQuery { get; } Property Value bool Model Type of the model referenced public Type Model { get; } Property Value Type TableName Table name of model public string TableName { get; } Property Value string UseInnerJoin As to whether the query will filter top-level rows. See: https://postgrest.org/en/stable/api.html#resource-embedding public bool UseInnerJoin { get; } Property Value bool Methods Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool"
  },
  "api/Supabase.Postgrest.Attributes.TableAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.TableAttribute.html",
    "title": "Class TableAttribute | postgrest-csharp",
    "keywords": "Class TableAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to map a C# Model to a Postgres Table. [AttributeUsage(AttributeTargets.Class)] public class TableAttribute : Attribute Inheritance object Attribute TableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples [Table(\"user\")] class User : BaseModel { [ColumnName(\"firstName\")] public string FirstName {get; set;} } Constructors TableAttribute(string) public TableAttribute(string tableName) Parameters tableName string Properties Name public string Name { get; set; } Property Value string"
  },
  "api/Supabase.Postgrest.Attributes.html": {
    "href": "api/Supabase.Postgrest.Attributes.html",
    "title": "Namespace Supabase.Postgrest.Attributes | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Attributes Classes ColumnAttribute Used to map a C# property to a Postgrest Column. PrimaryKeyAttribute Used to map a C# property to a Postgrest PrimaryKey. ReferenceAttribute Used to specify that a foreign key relationship exists in PostgreSQL See: https://postgrest.org/en/stable/api.html#resource-embedding TableAttribute Used to map a C# Model to a Postgres Table. Enums ReferenceAttribute.JoinType Specifies the Join type on this reference. PostgREST only allows for a LEFT join and an INNER join."
  },
  "api/Supabase.Postgrest.Client.html": {
    "href": "api/Supabase.Postgrest.Client.html",
    "title": "Class Client | postgrest-csharp",
    "keywords": "Class Client Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class Client : IPostgrestClient, IGettableHeaders Inheritance object Client Implements IPostgrestClient IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(string, ClientOptions?) Should be the first call to this class to initialize a connection with a Postgrest API Server public Client(string baseUrl, ClientOptions? options = null) Parameters baseUrl string Api Endpoint (ex: \"http://localhost:8000\"), no trailing slash required. options ClientOptions Optional client configuration. Properties BaseUrl API Base Url for subsequent calls. public string BaseUrl { get; } Property Value string GetHeaders Function that can be set to return dynamic headers. Headers specified in the constructor options will ALWAYS take precedence over headers returned by this function. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Options The Options Client was initialized with. public ClientOptions Options { get; } Property Value ClientOptions Methods AddDebugHandler(DebugEventHandler) Adds a debug handler public void AddDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler AddRequestPreparedHandler(OnRequestPreparedEventHandler) Adds a handler that is called prior to a request being sent. public void AddRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler ClearDebugHandlers() Clears debug handlers public void ClearDebugHandlers() ClearRequestPreparedHandlers() Clears all OnRequestPreparedEventHandler handlers. public void ClearRequestPreparedHandlers() RemoveDebugHandler(DebugEventHandler) Removes a debug handler public void RemoveDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler RemoveRequestPreparedHandler(OnRequestPreparedEventHandler) Removes an OnRequestPreparedEventHandler handler. public void RemoveRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler Rpc(string, object?) Perform a stored procedure call. public Task<BaseResponse> Rpc(string procedureName, object? parameters = null) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<BaseResponse> Rpc<TModeledResponse>(string, object?) Perform a stored procedure call. public Task<TModeledResponse?> Rpc<TModeledResponse>(string procedureName, object? parameters = null) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<TModeledResponse> A hydrated model Type Parameters TModeledResponse A type used for hydrating the HTTP response content (hydration through JSON.NET) SerializerSettings(ClientOptions?) Custom Serializer resolvers and converters that will be used for encoding and decoding Postgrest JSON responses. By default, Postgrest seems to use a date format that C# and Newtonsoft do not like, so this initial configuration handles that. public static JsonSerializerSettings SerializerSettings(ClientOptions? options = null) Parameters options ClientOptions Returns JsonSerializerSettings Table<T>() Returns a Table Query Builder instance for a defined model - representative of USE $TABLE public IPostgrestTable<T> Table<T>() where T : BaseModel, new() Returns IPostgrestTable<T> Type Parameters T Custom Model derived from BaseModel Table<T>(IPostgrestCacheProvider) Returns a Table Query Builder instance with a Cache Provider for a defined model - representative of USE #$TABLE public IPostgrestTableWithCache<T> Table<T>(IPostgrestCacheProvider cacheProvider) where T : BaseModel, new() Parameters cacheProvider IPostgrestCacheProvider Returns IPostgrestTableWithCache<T> Type Parameters T"
  },
  "api/Supabase.Postgrest.ClientOptions.html": {
    "href": "api/Supabase.Postgrest.ClientOptions.html",
    "title": "Class ClientOptions | postgrest-csharp",
    "keywords": "Class ClientOptions Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Options that can be passed to the Client configuration public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DATE_TIME_FORMAT public const string DATE_TIME_FORMAT = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFK\" Field Value string DateTimeStyles public readonly DateTimeStyles DateTimeStyles Field Value DateTimeStyles Properties Headers public Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> QueryParams public Dictionary<string, string> QueryParams { get; set; } Property Value Dictionary<string, string> Schema public string Schema { get; set; } Property Value string"
  },
  "api/Supabase.Postgrest.Constants.CountType.html": {
    "href": "api/Supabase.Postgrest.Constants.CountType.html",
    "title": "Enum Constants.CountType | postgrest-csharp",
    "keywords": "Enum Constants.CountType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll See: https://postgrest.org/en/v7.0.0/api.html?highlight=count#estimated-count public enum Constants.CountType Fields [MapTo(\"estimated\", null)] Estimated = 2 [MapTo(\"exact\", null)] Exact = 0 [MapTo(\"planned\", null)] Planned = 1"
  },
  "api/Supabase.Postgrest.Constants.NullPosition.html": {
    "href": "api/Supabase.Postgrest.Constants.NullPosition.html",
    "title": "Enum Constants.NullPosition | postgrest-csharp",
    "keywords": "Enum Constants.NullPosition Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll See: https://postgrest.org/en/v7.0.0/api.html?highlight=nulls%20first#ordering public enum Constants.NullPosition Fields [MapTo(\"nullsfirst\", null)] First = 0 [MapTo(\"nullslast\", null)] Last = 1"
  },
  "api/Supabase.Postgrest.Constants.Operator.html": {
    "href": "api/Supabase.Postgrest.Constants.Operator.html",
    "title": "Enum Constants.Operator | postgrest-csharp",
    "keywords": "Enum Constants.Operator Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll See: https://postgrest.org/en/v7.0.0/api.html?highlight=operators#operators public enum Constants.Operator Fields [MapTo(\"adj\", null)] Adjacent = 23 [MapTo(\"and\", null)] And = 0 [MapTo(\"cd\", null)] ContainedIn = 17 [MapTo(\"cs\", null)] Contains = 16 [MapTo(\"eq\", null)] Equals = 2 [MapTo(\"fts\", null)] FTS = 12 [MapTo(\"gt\", null)] GreaterThan = 3 [MapTo(\"gte\", null)] GreaterThanOrEqual = 4 [MapTo(\"ilike\", null)] ILike = 9 [MapTo(\"in\", null)] In = 10 [MapTo(\"is\", null)] Is = 11 [MapTo(\"lt\", null)] LessThan = 5 [MapTo(\"lte\", null)] LessThanOrEqual = 6 [MapTo(\"like\", null)] Like = 8 [MapTo(\"not\", null)] Not = 24 [MapTo(\"neq\", null)] NotEqual = 7 [MapTo(\"nxl\", null)] NotLeftOf = 22 [MapTo(\"nxr\", null)] NotRightOf = 21 [MapTo(\"or\", null)] Or = 1 [MapTo(\"ov\", null)] Overlap = 18 [MapTo(\"phfts\", null)] PHFTS = 14 [MapTo(\"plfts\", null)] PLFTS = 13 [MapTo(\"sl\", null)] StrictlyLeft = 19 [MapTo(\"sr\", null)] StrictlyRight = 20 [MapTo(\"wfts\", null)] WFTS = 15"
  },
  "api/Supabase.Postgrest.Constants.Ordering.html": {
    "href": "api/Supabase.Postgrest.Constants.Ordering.html",
    "title": "Enum Constants.Ordering | postgrest-csharp",
    "keywords": "Enum Constants.Ordering Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum Constants.Ordering Fields [MapTo(\"asc\", null)] Ascending = 0 [MapTo(\"desc\", null)] Descending = 1"
  },
  "api/Supabase.Postgrest.Constants.html": {
    "href": "api/Supabase.Postgrest.Constants.html",
    "title": "Class Constants | postgrest-csharp",
    "keywords": "Class Constants Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Supabase.Postgrest.Converters.DateTimeConverter.html": {
    "href": "api/Supabase.Postgrest.Converters.DateTimeConverter.html",
    "title": "Class DateTimeConverter | postgrest-csharp",
    "keywords": "Class DateTimeConverter Namespace Supabase.Postgrest.Converters Assembly Supabase.Postgrest.dll Converts an object to and from JSON. public class DateTimeConverter : JsonConverter Inheritance object JsonConverter DateTimeConverter Inherited Members JsonConverter.CanRead object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Postgrest.Converters.IntArrayConverter.html": {
    "href": "api/Supabase.Postgrest.Converters.IntArrayConverter.html",
    "title": "Class IntArrayConverter | postgrest-csharp",
    "keywords": "Class IntArrayConverter Namespace Supabase.Postgrest.Converters Assembly Supabase.Postgrest.dll Converts an object to and from JSON. public class IntArrayConverter : JsonConverter Inheritance object JsonConverter IntArrayConverter Inherited Members JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanRead Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON. public override bool CanRead { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can read JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Postgrest.Converters.html": {
    "href": "api/Supabase.Postgrest.Converters.html",
    "title": "Namespace Supabase.Postgrest.Converters | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Converters Classes DateTimeConverter Converts an object to and from JSON. IntArrayConverter Converts an object to and from JSON."
  },
  "api/Supabase.Postgrest.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Postgrest.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | postgrest-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Postgrest.Exceptions Assembly Supabase.Postgrest.dll public enum FailureHint.Reason Fields ForeignKeyViolation = 2 InvalidArgument = 7 NotAuthorized = 1 ServerError = 4 UndefinedFunction = 6 UndefinedTable = 5 UniquenessViolation = 3 Unknown = 0"
  },
  "api/Supabase.Postgrest.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Postgrest.Exceptions.FailureHint.html",
    "title": "Class FailureHint | postgrest-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Postgrest.Exceptions Assembly Supabase.Postgrest.dll https://postgrest.org/en/v10.2/errors.html?highlight=exception#http-status-codes public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DetectReason(PostgrestException) public static FailureHint.Reason DetectReason(PostgrestException pgex) Parameters pgex PostgrestException Returns FailureHint.Reason"
  },
  "api/Supabase.Postgrest.Exceptions.PostgrestException.html": {
    "href": "api/Supabase.Postgrest.Exceptions.PostgrestException.html",
    "title": "Class PostgrestException | postgrest-csharp",
    "keywords": "Class PostgrestException Namespace Supabase.Postgrest.Exceptions Assembly Supabase.Postgrest.dll Errors from Postgrest are wrapped by this exception public class PostgrestException : Exception, ISerializable Inheritance object Exception PostgrestException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PostgrestException(string?) public PostgrestException(string? message) Parameters message string PostgrestException(string?, Exception?) public PostgrestException(string? message, Exception? innerException) Parameters message string innerException Exception Properties Content The content of the response object from Postgrest public string? Content { get; } Property Value string Reason Postgres client's best effort at decoding the error from the GoTrue server. public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Response The response object from Postgrest public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage StatusCode The HTTP status code of the response object from Postgrest public int StatusCode { get; } Property Value int Methods AddReason() Attempts to decode the error from the GoTrue server. public void AddReason()"
  },
  "api/Supabase.Postgrest.Exceptions.html": {
    "href": "api/Supabase.Postgrest.Exceptions.html",
    "title": "Namespace Supabase.Postgrest.Exceptions | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Exceptions Classes FailureHint https://postgrest.org/en/v10.2/errors.html?highlight=exception#http-status-codes PostgrestException Errors from Postgrest are wrapped by this exception Enums FailureHint.Reason"
  },
  "api/Supabase.Postgrest.Extensions.EnumExtensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.EnumExtensions.html",
    "title": "Class EnumExtensions | postgrest-csharp",
    "keywords": "Class EnumExtensions Namespace Supabase.Postgrest.Extensions Assembly Supabase.Postgrest.dll Adds functionality to get a typed Attribute attached to an enum value. public static class EnumExtensions Inheritance object EnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Supabase.Postgrest.Extensions.RangeExtensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.RangeExtensions.html",
    "title": "Class RangeExtensions | postgrest-csharp",
    "keywords": "Class RangeExtensions Namespace Supabase.Postgrest.Extensions Assembly Supabase.Postgrest.dll Adds functionality to transform a C# Range to a Postgrest String. https://www.postgresql.org/docs/14/rangetypes.html public static class RangeExtensions Inheritance object RangeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Supabase.Postgrest.Extensions.UriExtensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.UriExtensions.html",
    "title": "Class UriExtensions | postgrest-csharp",
    "keywords": "Class UriExtensions Namespace Supabase.Postgrest.Extensions Assembly Supabase.Postgrest.dll Pull the instance info out of the Uri public static class UriExtensions Inheritance object UriExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetInstanceUrl(Uri) Pull the instance info out of the Uri public static string GetInstanceUrl(this Uri uri) Parameters uri Uri Returns string"
  },
  "api/Supabase.Postgrest.Extensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.html",
    "title": "Namespace Supabase.Postgrest.Extensions | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Extensions Classes EnumExtensions Adds functionality to get a typed Attribute attached to an enum value. RangeExtensions Adds functionality to transform a C# Range to a Postgrest String. https://www.postgresql.org/docs/14/rangetypes.html UriExtensions Pull the instance info out of the Uri"
  },
  "api/Supabase.Postgrest.FullTextSearchConfig.html": {
    "href": "api/Supabase.Postgrest.FullTextSearchConfig.html",
    "title": "Class FullTextSearchConfig | postgrest-csharp",
    "keywords": "Class FullTextSearchConfig Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Configuration Object for Full Text Search. API Reference: http://postgrest.org/en/v7.0.0/api.html?highlight=full%20text%20search#full-text-search public class FullTextSearchConfig Inheritance object FullTextSearchConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FullTextSearchConfig(string, string?) Constructor for Full Text Search. public FullTextSearchConfig(string queryText, string? config) Parameters queryText string config string Properties Config Defaults to english [JsonProperty(\"config\")] public string Config { get; } Property Value string QueryText Query Text [JsonProperty(\"queryText\")] public string QueryText { get; } Property Value string"
  },
  "api/Supabase.Postgrest.Index.html": {
    "href": "api/Supabase.Postgrest.Index.html",
    "title": "Class Index | postgrest-csharp",
    "keywords": "Class Index Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Represent a type can be used to index a collection either from the start or the end. public class Index : IEquatable<Index> Inheritance object Index Implements IEquatable<Index> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Index is used by the C# compiler to support the new index syntax int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ; int lastElement = someArray[^1]; // lastElement = 5 Constructors Index(int, bool) Construct an Index using a value and indicating if the index is from the start or from the end. public Index(int value, bool fromEnd = false) Parameters value int The index value. it has to be zero or positive number. fromEnd bool Indicating if the index is from the start or from the end. Remarks If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element. Properties End Create an Index pointing at beyond last element. public static Index End { get; } Property Value Index IsFromEnd Indicates whether the index is from the start or the end. public bool IsFromEnd { get; } Property Value bool Start Create an Index pointing at first element. public static Index Start { get; } Property Value Index Value Returns the index value. public int Value { get; } Property Value int Methods Equals(Index) Indicates whether the current Index object is equal to another Index object. public bool Equals(Index other) Parameters other Index An object to compare with this object Returns bool Equals(object?) Indicates whether the current Index object is equal to another object of the same type. public override bool Equals(object? value) Parameters value object An object to compare with this object Returns bool FromEnd(int) Create an Index from the end at the position indicated by the value. public static Index FromEnd(int value) Parameters value int The index value from the end. Returns Index FromStart(int) Create an Index from the start at the position indicated by the value. public static Index FromStart(int value) Parameters value int The index value from the start. Returns Index GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int GetOffset(int) Calculate the offset from the start using the giving collection length. public int GetOffset(int length) Parameters length int The length of the collection that the Index will be used with. length has to be a positive value Returns int Remarks For performance reason, we don't validate the input length parameter and the returned offset value against negative values. we don't validate either the returned offset is greater than the input length. It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and then used to index a collection will get out of range exception which will be same affect as the validation. ToString() Converts the value of the current Index object to its equivalent string representation. public override string ToString() Returns string Operators implicit operator Index(int) Converts integer number to an Index. public static implicit operator Index(int value) Parameters value int Returns Index"
  },
  "api/Supabase.Postgrest.IntRange.html": {
    "href": "api/Supabase.Postgrest.IntRange.html",
    "title": "Class IntRange | postgrest-csharp",
    "keywords": "Class IntRange Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Represent a range has start and end indexes. public class IntRange : IEquatable<IntRange> Inheritance object IntRange Implements IEquatable<IntRange> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Range is used by the C# compiler to support the range syntax. int[] someArray = new int[5] { 1, 2, 3, 4, 5 }; int[] subArray1 = someArray[0..2]; // { 1, 2 } int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 } Constructors IntRange(Index, Index) Construct a Range object using the start and end indexes. public IntRange(Index start, Index end) Parameters start Index Represent the inclusive start index of the range. end Index Represent the exclusive end index of the range. Properties All Create a Range object starting from first element to the end. public static IntRange All { get; } Property Value IntRange End Represent the exclusive end index of the Range. public Index End { get; } Property Value Index Start Represent the inclusive start index of the Range. public Index Start { get; } Property Value Index Methods EndAt(Index) Create a Range object starting from first element in the collection to the end Index. public static IntRange EndAt(Index end) Parameters end Index Returns IntRange Equals(IntRange) Indicates whether the current Range object is equal to another Range object. public bool Equals(IntRange other) Parameters other IntRange An object to compare with this object Returns bool Equals(object?) Indicates whether the current Range object is equal to another object of the same type. public override bool Equals(object? value) Parameters value object An object to compare with this object Returns bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int GetOffsetAndLength(int) Calculate the start offset and length of range object using a collection length. public (int Offset, int Length) GetOffsetAndLength(int length) Parameters length int The length of the collection that the range will be used with. length has to be a positive value. Returns (int Offset, int Length) Remarks For performance reason, we don't validate the input length parameter against negative values. It is expected Range will be used with collections which always have non negative length/count. We validate the range is inside the length scope though. StartAt(Index) Create a Range object starting from start index to the end of the collection. public static IntRange StartAt(Index start) Parameters start Index Returns IntRange ToString() Converts the value of the current Range object to its equivalent string representation. public override string ToString() Returns string"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestCacheProvider.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestCacheProvider.html",
    "title": "Interface IPostgrestCacheProvider | postgrest-csharp",
    "keywords": "Interface IPostgrestCacheProvider Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll A caching provider than can be used by postgrest to store requests. public interface IPostgrestCacheProvider Methods ClearItem(string) Clear an item within a caching solution by a key. Task ClearItem(string key) Parameters key string A reproducible key for a defined query. Returns Task Empty() An empty/clear cache implementation. Task Empty() Returns Task GetItem<T>(string) Gets an item from a caching solution, should coerce into a datatype. This will most likely be a JSON deserialization approach. Task<T?> GetItem<T>(string key) Parameters key string A reproducible key for a defined query. Returns Task<T> Type Parameters T SetItem(string, object) Sets an item within a caching solution, should store in a way that the data can be retrieved and coerced into a generic type by GetItem<T>(string) This will most likely be a JSON serialization approach. Task SetItem(string key, object value) Parameters key string A reproducible key for a defined query. value object An object of serializable data. Returns Task"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestClient.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestClient.html",
    "title": "Interface IPostgrestClient | postgrest-csharp",
    "keywords": "Interface IPostgrestClient Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Client interface for Postgrest public interface IPostgrestClient : IGettableHeaders Inherited Members IGettableHeaders.GetHeaders Properties BaseUrl API Base Url for subsequent calls. string BaseUrl { get; } Property Value string Options The Options Client was initialized with. ClientOptions Options { get; } Property Value ClientOptions Methods AddDebugHandler(DebugEventHandler) Adds a debug handler void AddDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler AddRequestPreparedHandler(OnRequestPreparedEventHandler) Adds a handler that is called prior to a request being sent. void AddRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler ClearDebugHandlers() Clears debug handlers void ClearDebugHandlers() ClearRequestPreparedHandlers() Clears all OnRequestPreparedEventHandler handlers. void ClearRequestPreparedHandlers() RemoveDebugHandler(DebugEventHandler) Removes a debug handler void RemoveDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler RemoveRequestPreparedHandler(OnRequestPreparedEventHandler) Removes an OnRequestPreparedEventHandler handler. void RemoveRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler Rpc(string, object?) Perform a stored procedure call. Task<BaseResponse> Rpc(string procedureName, object? parameters) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<BaseResponse> Rpc<TModeledResponse>(string, object?) Perform a stored procedure call. Task<TModeledResponse?> Rpc<TModeledResponse>(string procedureName, object? parameters = null) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<TModeledResponse> A hydrated model Type Parameters TModeledResponse A type used for hydrating the HTTP response content (hydration through JSON.NET) Table<T>() Returns a Table Query Builder instance for a defined model - representative of USE $TABLE IPostgrestTable<T> Table<T>() where T : BaseModel, new() Returns IPostgrestTable<T> Type Parameters T Custom Model derived from BaseModel Table<T>(IPostgrestCacheProvider) Returns a Table Query Builder instance with a Cache Provider for a defined model - representative of USE #$TABLE IPostgrestTableWithCache<T> Table<T>(IPostgrestCacheProvider cacheProvider) where T : BaseModel, new() Parameters cacheProvider IPostgrestCacheProvider Returns IPostgrestTableWithCache<T> Type Parameters T"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.DebugEventHandler.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.DebugEventHandler.html",
    "title": "Delegate IPostgrestDebugger.DebugEventHandler | postgrest-csharp",
    "keywords": "Delegate IPostgrestDebugger.DebugEventHandler Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll public delegate void IPostgrestDebugger.DebugEventHandler(object? sender, string message, PostgrestException? exception) Parameters sender object message string exception PostgrestException"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.html",
    "title": "Interface IPostgrestDebugger | postgrest-csharp",
    "keywords": "Interface IPostgrestDebugger Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Interface for getting debug info from Postgrest public interface IPostgrestDebugger Methods AddDebugHandler(DebugEventHandler) Adds a debug handler void AddDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler ClearDebugHandlers() Clears debug handlers void ClearDebugHandlers() Log(object?, string, PostgrestException?) Logs a message void Log(object? sender, string message, PostgrestException? exception = null) Parameters sender object message string exception PostgrestException RemoveDebugHandler(DebugEventHandler) Removes a debug handler void RemoveDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestQueryFilter.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestQueryFilter.html",
    "title": "Interface IPostgrestQueryFilter | postgrest-csharp",
    "keywords": "Interface IPostgrestQueryFilter Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll public interface IPostgrestQueryFilter Properties Criteria object? Criteria { get; } Property Value object Op Constants.Operator Op { get; } Property Value Constants.Operator Property string? Property { get; } Property Value string"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestTable-1.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestTable-1.html",
    "title": "Interface IPostgrestTable<TModel> | postgrest-csharp",
    "keywords": "Interface IPostgrestTable<TModel> Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Client interface for Postgrest public interface IPostgrestTable<TModel> : IGettableHeaders where TModel : BaseModel, new() Type Parameters TModel Inherited Members IGettableHeaders.GetHeaders Properties BaseUrl API Base Url for subsequent calls. string BaseUrl { get; } Property Value string TableName Name of the Table parsed by the Model. string TableName { get; } Property Value string Methods And(List<IPostgrestQueryFilter>) Adds an AND Filter to the current query args. IPostgrestTable<TModel> And(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Clear() Clears currently defined query values. void Clear() Columns(Expression<Func<TModel, object[]>>) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns IPostgrestTable<TModel> Columns(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Returns IPostgrestTable<TModel> Columns(string[]) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns IPostgrestTable<TModel> Columns(string[] columns) Parameters columns string[] Returns IPostgrestTable<TModel> Count(CountType, CancellationToken) Returns ONLY a count from the specified query. See: https://postgrest.org/en/v7.0.0/api.html?highlight=count Task<int> Count(Constants.CountType type, CancellationToken cancellationToken = default) Parameters type Constants.CountType The kind of count. cancellationToken CancellationToken Returns Task<int> Delete(QueryOptions?, CancellationToken) Executes a delete request using the defined query params on the current instance. Task Delete(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task Delete(TModel, QueryOptions?, CancellationToken) Executes a delete request using the model's primary key as the filter for the request. Task<ModeledResponse<TModel>> Delete(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Filter<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Add a filter to a query request using a predicate to select column. IPostgrestTable<TModel> Filter<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a columns from the Model to be returned op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion Exceptions ArgumentException Filter<TCriterion>(string, Operator, TCriterion?) Add a Filter to a query request IPostgrestTable<TModel> Filter<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string Column Name in Table. op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion GenerateUrl() Generates the encoded URL with defined query parameters that will be sent to the Postgrest API. string GenerateUrl() Returns string Get(CancellationToken) Executes the query using the defined filters on the current instance. Task<ModeledResponse<TModel>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Insert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes a BULK INSERT query using the defined query params on the current instance. Task<ModeledResponse<TModel>> Insert(ICollection<TModel> models, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters models ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Insert(TModel, QueryOptions?, CancellationToken) Executes an INSERT query using the defined query params on the current instance. Task<ModeledResponse<TModel>> Insert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Limit(int, string?) Sets a limit with an optional foreign table reference. IPostgrestTable<TModel> Limit(int limit, string? foreignTableName = null) Parameters limit int foreignTableName string Returns IPostgrestTable<TModel> Match(Dictionary<string, string>) Finds all rows whose columns match the specified query object. IPostgrestTable<TModel> Match(Dictionary<string, string> query) Parameters query Dictionary<string, string> The object to filter with, with column names as keys mapped to their filter values. Returns IPostgrestTable<TModel> Match(TModel) Fills in query parameters based on a given model's primary key(s). IPostgrestTable<TModel> Match(TModel model) Parameters model TModel A model with a primary key column Returns IPostgrestTable<TModel> Not(IPostgrestQueryFilter) Adds a NOT filter to the current query args. IPostgrestTable<TModel> Not(IPostgrestQueryFilter filter) Parameters filter IPostgrestQueryFilter Returns IPostgrestTable<TModel> Not(Expression<Func<TModel, object>>, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. IPostgrestTable<TModel> Not(Expression<Func<TModel, object>> predicate, Constants.Operator op, Dictionary<string, object> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not(string, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. IPostgrestTable<TModel> Not(string columnName, Constants.Operator op, Dictionary<string, object> criteria) Parameters columnName string op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>>, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, List<TCriterion> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, List<TCriterion> criteria) Parameters columnName string op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Offset(int, string?) Sets an offset with an optional foreign table reference. IPostgrestTable<TModel> Offset(int offset, string? foreignTableName = null) Parameters offset int foreignTableName string Returns IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>>) Set an onConflict query parameter for UPSERTing on a column that has a UNIQUE constraint using a linq predicate. IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>> predicate) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. Returns IPostgrestTable<TModel> OnConflict(string) By specifying the onConflict query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. IPostgrestTable<TModel> OnConflict(string columnName) Parameters columnName string Returns IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter>) Adds a OR Filter to the current query args. IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Order(Expression<Func<TModel, object>>, Ordering, NullPosition) Adds an ordering to the current query args using a predicate function. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . IPostgrestTable<TModel> Order(Expression<Func<TModel, object>> predicate, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters predicate Expression<Func<TModel, object>> ordering Constants.Ordering Expects a columns from the Model to be returned nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . IPostgrestTable<TModel> Order(string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters column string Column Name ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . IPostgrestTable<TModel> Order(string foreignTable, string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters foreignTable string column string ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Range(int) Sets a FROM range, similar to a StartAt query. IPostgrestTable<TModel> Range(int from) Parameters from int Returns IPostgrestTable<TModel> Range(int, int) Sets a bounded range to the current query. IPostgrestTable<TModel> Range(int from, int to) Parameters from int to int Returns IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>>) Select columns using a predicate function. For example: Table<Movie>().Select(x => new[] { x.Id, x.Name, x.CreatedAt }).Get(); IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Expects an array of columns from the Model to be returned. Returns IPostgrestTable<TModel> Select(string) Select columns for query. IPostgrestTable<TModel> Select(string columnQuery) Parameters columnQuery string Returns IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>>) Specifies a KeyValuePair to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>> keyValuePairExpression) Parameters keyValuePairExpression Expression<Func<TModel, KeyValuePair<object, object>>> Returns IPostgrestTable<TModel> Exceptions ArgumentException Set(Expression<Func<TModel, object>>, object?) Specifies a key and value to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. IPostgrestTable<TModel> Set(Expression<Func<TModel, object>> keySelector, object? value) Parameters keySelector Expression<Func<TModel, object>> value object Returns IPostgrestTable<TModel> Single(CancellationToken) Executes a query that expects to have a single object returned, rather than returning list of models it will return a single model. Task<TModel?> Single(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<TModel> Update(QueryOptions?, CancellationToken) Calls an Update function after Set has been called. Task<ModeledResponse<TModel>> Update(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Exceptions ArgumentException Update(TModel, QueryOptions?, CancellationToken) Executes an UPDATE query using the defined query params on the current instance. Task<ModeledResponse<TModel>> Update(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed response from the database. Upsert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. Task<ModeledResponse<TModel>> Upsert(ICollection<TModel> model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Upsert(TModel, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. Task<ModeledResponse<TModel>> Upsert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Where(Expression<Func<TModel, bool>>) Filter a query based on a predicate function. Note: Chaining multiple Where(Expression<Func<TModel, bool>>) calls will be parsed as an \"AND\" query. Examples: Table<Movie>().Where(x => x.Name == \"Top Gun\").Get(); Table<Movie>().Where(x => x.Name == \"Top Gun\" || x.Name == \"Mad Max\").Get(); Table<Movie>().Where(x => x.Name.Contains(\"Gun\")).Get(); Table<Movie>().Where(x => x.CreatedAt <= new DateTime(2022, 08, 21)).Get(); Table<Movie>().Where(x => x.Id > 5 && x.Name.Contains(\"Max\")).Get(); IPostgrestTable<TModel> Where(Expression<Func<TModel, bool>> predicate) Parameters predicate Expression<Func<TModel, bool>> Returns IPostgrestTable<TModel>"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestTableWithCache-1.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestTableWithCache-1.html",
    "title": "Interface IPostgrestTableWithCache<T> | postgrest-csharp",
    "keywords": "Interface IPostgrestTableWithCache<T> Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Client interface for Postgrest public interface IPostgrestTableWithCache<T> : IPostgrestTable<T>, IGettableHeaders where T : BaseModel, new() Type Parameters T Inherited Members IPostgrestTable<T>.BaseUrl IPostgrestTable<T>.TableName IPostgrestTable<T>.GenerateUrl() IPostgrestTable<T>.And(List<IPostgrestQueryFilter>) IPostgrestTable<T>.Clear() IPostgrestTable<T>.Columns(string[]) IPostgrestTable<T>.Columns(Expression<Func<T, object[]>>) IPostgrestTable<T>.Count(Constants.CountType, CancellationToken) IPostgrestTable<T>.Delete(QueryOptions, CancellationToken) IPostgrestTable<T>.Delete(T, QueryOptions, CancellationToken) IPostgrestTable<T>.Filter<TCriterion>(string, Constants.Operator, TCriterion) IPostgrestTable<T>.Filter<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) IPostgrestTable<T>.Insert(ICollection<T>, QueryOptions, CancellationToken) IPostgrestTable<T>.Insert(T, QueryOptions, CancellationToken) IPostgrestTable<T>.Limit(int, string) IPostgrestTable<T>.Match(Dictionary<string, string>) IPostgrestTable<T>.Match(T) IPostgrestTable<T>.Not(IPostgrestQueryFilter) IPostgrestTable<T>.Not(string, Constants.Operator, Dictionary<string, object>) IPostgrestTable<T>.Not(Expression<Func<T, object>>, Constants.Operator, Dictionary<string, object>) IPostgrestTable<T>.Not<TCriterion>(string, Constants.Operator, List<TCriterion>) IPostgrestTable<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, List<TCriterion>) IPostgrestTable<T>.Not<TCriterion>(string, Constants.Operator, TCriterion) IPostgrestTable<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) IPostgrestTable<T>.Offset(int, string) IPostgrestTable<T>.OnConflict(string) IPostgrestTable<T>.OnConflict(Expression<Func<T, object>>) IPostgrestTable<T>.Or(List<IPostgrestQueryFilter>) IPostgrestTable<T>.Order(string, Constants.Ordering, Constants.NullPosition) IPostgrestTable<T>.Order(Expression<Func<T, object>>, Constants.Ordering, Constants.NullPosition) IPostgrestTable<T>.Order(string, string, Constants.Ordering, Constants.NullPosition) IPostgrestTable<T>.Range(int) IPostgrestTable<T>.Range(int, int) IPostgrestTable<T>.Select(string) IPostgrestTable<T>.Select(Expression<Func<T, object[]>>) IPostgrestTable<T>.Where(Expression<Func<T, bool>>) IPostgrestTable<T>.Single(CancellationToken) IPostgrestTable<T>.Set(Expression<Func<T, object>>, object) IPostgrestTable<T>.Set(Expression<Func<T, KeyValuePair<object, object>>>) IPostgrestTable<T>.Update(QueryOptions, CancellationToken) IPostgrestTable<T>.Update(T, QueryOptions, CancellationToken) IPostgrestTable<T>.Upsert(ICollection<T>, QueryOptions, CancellationToken) IPostgrestTable<T>.Upsert(T, QueryOptions, CancellationToken) IGettableHeaders.GetHeaders Methods Get(CancellationToken) Performs a Get request, returning a CacheBackedRequest<TModel> which populates from the cache, if applicable. Task<CacheBackedRequest<T>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<CacheBackedRequest<T>>"
  },
  "api/Supabase.Postgrest.Interfaces.html": {
    "href": "api/Supabase.Postgrest.Interfaces.html",
    "title": "Namespace Supabase.Postgrest.Interfaces | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Interfaces Interfaces IPostgrestCacheProvider A caching provider than can be used by postgrest to store requests. IPostgrestClient Client interface for Postgrest IPostgrestDebugger Interface for getting debug info from Postgrest IPostgrestQueryFilter IPostgrestTableWithCache<T> Client interface for Postgrest IPostgrestTable<TModel> Client interface for Postgrest Delegates IPostgrestDebugger.DebugEventHandler"
  },
  "api/Supabase.Postgrest.Models.BaseModel.html": {
    "href": "api/Supabase.Postgrest.Models.BaseModel.html",
    "title": "Class BaseModel | postgrest-csharp",
    "keywords": "Class BaseModel Namespace Supabase.Postgrest.Models Assembly Supabase.Postgrest.dll Abstract class that must be implemented by C# Postgrest Models. public abstract class BaseModel Inheritance object BaseModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BaseUrl [JsonIgnore] public string? BaseUrl { get; set; } Property Value string PrimaryKey Gets the values of the PrimaryKey columns (there can be multiple) on a model's instance as defined by the [PrimaryKey] attributes on a property on the model. [JsonIgnore] public Dictionary<PrimaryKeyAttribute, object> PrimaryKey { get; } Property Value Dictionary<PrimaryKeyAttribute, object> RequestClientOptions [JsonIgnore] public ClientOptions? RequestClientOptions { get; set; } Property Value ClientOptions TableName [JsonIgnore] public string TableName { get; } Property Value string Methods Delete<T>(CancellationToken) public virtual Task Delete<T>(CancellationToken cancellationToken = default) where T : BaseModel, new() Parameters cancellationToken CancellationToken Returns Task Type Parameters T Update<T>(CancellationToken) public Task<ModeledResponse<T>> Update<T>(CancellationToken cancellationToken = default) where T : BaseModel, new() Parameters cancellationToken CancellationToken Returns Task<ModeledResponse<T>> Type Parameters T"
  },
  "api/Supabase.Postgrest.Models.CachedModel-1.html": {
    "href": "api/Supabase.Postgrest.Models.CachedModel-1.html",
    "title": "Class CachedModel<TModel> | postgrest-csharp",
    "keywords": "Class CachedModel<TModel> Namespace Supabase.Postgrest.Models Assembly Supabase.Postgrest.dll Represents a cacheable model public class CachedModel<TModel> where TModel : BaseModel, new() Type Parameters TModel Inheritance object CachedModel<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CachedAt Cache time in UTC. [JsonProperty(\"cachedAt\")] public DateTime CachedAt { get; set; } Property Value DateTime Models The stored Models [JsonProperty(\"response\")] public List<TModel>? Models { get; set; } Property Value List<TModel>"
  },
  "api/Supabase.Postgrest.Models.html": {
    "href": "api/Supabase.Postgrest.Models.html",
    "title": "Namespace Supabase.Postgrest.Models | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Models Classes BaseModel Abstract class that must be implemented by C# Postgrest Models. CachedModel<TModel> Represents a cacheable model"
  },
  "api/Supabase.Postgrest.OnRequestPreparedEventHandler.html": {
    "href": "api/Supabase.Postgrest.OnRequestPreparedEventHandler.html",
    "title": "Delegate OnRequestPreparedEventHandler | postgrest-csharp",
    "keywords": "Delegate OnRequestPreparedEventHandler Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Delegate representing the request to be sent to the remote server. public delegate void OnRequestPreparedEventHandler(object sender, ClientOptions clientOptions, HttpMethod method, string url, JsonSerializerSettings serializerSettings, object? data = null, Dictionary<string, string>? headers = null) Parameters sender object Delegate representing the request to be sent to the remote server. clientOptions ClientOptions Delegate representing the request to be sent to the remote server. method HttpMethod Delegate representing the request to be sent to the remote server. url string Delegate representing the request to be sent to the remote server. serializerSettings JsonSerializerSettings Delegate representing the request to be sent to the remote server. data object Delegate representing the request to be sent to the remote server. headers Dictionary<string, string> Delegate representing the request to be sent to the remote server."
  },
  "api/Supabase.Postgrest.PostgrestContractResolver.html": {
    "href": "api/Supabase.Postgrest.PostgrestContractResolver.html",
    "title": "Class PostgrestContractResolver | postgrest-csharp",
    "keywords": "Class PostgrestContractResolver Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll A custom resolver that handles mapping column names and property names as well as handling the conversion of Postgrest Ranges to a C# Range. public class PostgrestContractResolver : DefaultContractResolver, IContractResolver Inheritance object DefaultContractResolver PostgrestContractResolver Implements IContractResolver Inherited Members DefaultContractResolver.ResolveContract(Type) DefaultContractResolver.GetSerializableMembers(Type) DefaultContractResolver.CreateObjectContract(Type) DefaultContractResolver.CreateConstructorParameters(ConstructorInfo, JsonPropertyCollection) DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty, ParameterInfo) DefaultContractResolver.ResolveContractConverter(Type) DefaultContractResolver.CreateDictionaryContract(Type) DefaultContractResolver.CreateArrayContract(Type) DefaultContractResolver.CreatePrimitiveContract(Type) DefaultContractResolver.CreateLinqContract(Type) DefaultContractResolver.CreateISerializableContract(Type) DefaultContractResolver.CreateDynamicContract(Type) DefaultContractResolver.CreateStringContract(Type) DefaultContractResolver.CreateContract(Type) DefaultContractResolver.CreateProperties(Type, MemberSerialization) DefaultContractResolver.CreateMemberValueProvider(MemberInfo) DefaultContractResolver.ResolvePropertyName(string) DefaultContractResolver.ResolveExtensionDataName(string) DefaultContractResolver.ResolveDictionaryKey(string) DefaultContractResolver.GetResolvedPropertyName(string) DefaultContractResolver.DynamicCodeGeneration DefaultContractResolver.DefaultMembersSearchFlags DefaultContractResolver.SerializeCompilerGeneratedMembers DefaultContractResolver.IgnoreSerializableInterface DefaultContractResolver.IgnoreSerializableAttribute DefaultContractResolver.IgnoreIsSpecifiedMembers DefaultContractResolver.IgnoreShouldSerializeMembers DefaultContractResolver.NamingStrategy object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateProperty(MemberInfo, MemberSerialization) Creates a Newtonsoft.Json.Serialization.JsonProperty for the given MemberInfo. protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization) Parameters member MemberInfo The member to create a Newtonsoft.Json.Serialization.JsonProperty for. memberSerialization MemberSerialization The member's parent Newtonsoft.Json.MemberSerialization. Returns JsonProperty A created Newtonsoft.Json.Serialization.JsonProperty for the given MemberInfo. SetState(bool, bool, bool) Sets the state of the contract resolver to either insert, update, or upsert. public void SetState(bool isInsert = false, bool isUpdate = false, bool isUpsert = false) Parameters isInsert bool isUpdate bool isUpsert bool"
  },
  "api/Supabase.Postgrest.QueryFilter-2.html": {
    "href": "api/Supabase.Postgrest.QueryFilter-2.html",
    "title": "Class QueryFilter<TModel, TCriterion> | postgrest-csharp",
    "keywords": "Class QueryFilter<TModel, TCriterion> Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Allow for the expression of a query filter with linq expressions. public class QueryFilter<TModel, TCriterion> : IPostgrestQueryFilter Type Parameters TModel TCriterion Inheritance object QueryFilter<TModel, TCriterion> Implements IPostgrestQueryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryFilter(Expression<Func<TModel, object>>, Operator, TCriterion?) Allows the creation of a Query Filter using a LINQ expression. public QueryFilter(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> op Constants.Operator criterion TCriterion Exceptions ArgumentException Properties Criteria public object? Criteria { get; } Property Value object Op public Constants.Operator Op { get; } Property Value Constants.Operator Property public string? Property { get; } Property Value string"
  },
  "api/Supabase.Postgrest.QueryFilter.html": {
    "href": "api/Supabase.Postgrest.QueryFilter.html",
    "title": "Class QueryFilter | postgrest-csharp",
    "keywords": "Class QueryFilter Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class QueryFilter : IPostgrestQueryFilter Inheritance object QueryFilter Implements IPostgrestQueryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryFilter(Operator, IPostgrestQueryFilter) Constructor to enable NOT functionality public QueryFilter(Constants.Operator op, IPostgrestQueryFilter filter) Parameters op Constants.Operator Operation: Not. filter IPostgrestQueryFilter QueryFilter(Operator, List<IPostgrestQueryFilter>) Constructor to enable AND and OR Queries by allowing nested QueryFilters. public QueryFilter(Constants.Operator op, List<IPostgrestQueryFilter> filters) Parameters op Constants.Operator Operation: And, Or filters List<IPostgrestQueryFilter> QueryFilter(string, Operator, FullTextSearchConfig) Constructor for Full Text Search. public QueryFilter(string property, Constants.Operator op, FullTextSearchConfig fullTextSearchConfig) Parameters property string Column Name op Constants.Operator Operation: FTS, PHFTS, PLFTS, WFTS fullTextSearchConfig FullTextSearchConfig QueryFilter(string, Operator, IntRange) Constructor for Range Queries. public QueryFilter(string property, Constants.Operator op, IntRange range) Parameters property string op Constants.Operator Operator: Overlap, StrictlyLeft, StrictlyRight, NotRightOf, NotLeftOf, Adjacent range IntRange QueryFilter(string, Operator, object?) Contractor to use single value filtering. public QueryFilter(string property, Constants.Operator op, object? criteria) Parameters property string Column name op Constants.Operator Operation: And, Equals, GreaterThan, LessThan, GreaterThanOrEqual, LessThanOrEqual, NotEqual, Is, Adjacent, Not, Like, ILike criteria object Fields NullVal String value to be substituted for a null criterion public const string NullVal = \"null\" Field Value string Properties Criteria public object? Criteria { get; } Property Value object Op public Constants.Operator Op { get; } Property Value Constants.Operator Property public string? Property { get; } Property Value string"
  },
  "api/Supabase.Postgrest.QueryOptions.CountType.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.CountType.html",
    "title": "Enum QueryOptions.CountType | postgrest-csharp",
    "keywords": "Enum QueryOptions.CountType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum QueryOptions.CountType Fields [MapTo(\"estimated\", null)] Estimated = 3 [MapTo(\"exact\", null)] Exact = 1 [MapTo(\"none\", null)] None = 0 [MapTo(\"planned\", null)] Planned = 2"
  },
  "api/Supabase.Postgrest.QueryOptions.DuplicateResolutionType.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.DuplicateResolutionType.html",
    "title": "Enum QueryOptions.DuplicateResolutionType | postgrest-csharp",
    "keywords": "Enum QueryOptions.DuplicateResolutionType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum QueryOptions.DuplicateResolutionType Fields [MapTo(\"ignore-duplicates\", null)] IgnoreDuplicates = 1 [MapTo(\"merge-duplicates\", null)] MergeDuplicates = 0"
  },
  "api/Supabase.Postgrest.QueryOptions.ReturnType.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.ReturnType.html",
    "title": "Enum QueryOptions.ReturnType | postgrest-csharp",
    "keywords": "Enum QueryOptions.ReturnType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum QueryOptions.ReturnType Fields [MapTo(\"minimal\", null)] Minimal = 0 [MapTo(\"representation\", null)] Representation = 1"
  },
  "api/Supabase.Postgrest.QueryOptions.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.html",
    "title": "Class QueryOptions | postgrest-csharp",
    "keywords": "Class QueryOptions Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class QueryOptions Inheritance object QueryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Count algorithm to use to count rows in a table. public QueryOptions.CountType Count { get; set; } Property Value QueryOptions.CountType DuplicateResolution Specifies if duplicate rows should be ignored and not inserted. public QueryOptions.DuplicateResolutionType DuplicateResolution { get; set; } Property Value QueryOptions.DuplicateResolutionType OnConflict /// By specifying the onConflict query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. public string? OnConflict { get; set; } Property Value string Returning By default the new record is returned. Set this to 'Minimal' if you don't need this value. public QueryOptions.ReturnType Returning { get; set; } Property Value QueryOptions.ReturnType Upsert If the record should be upserted public bool Upsert { get; set; } Property Value bool Methods ToHeaders() public Dictionary<string, string> ToHeaders() Returns Dictionary<string, string>"
  },
  "api/Supabase.Postgrest.QueryOrderer.html": {
    "href": "api/Supabase.Postgrest.QueryOrderer.html",
    "title": "Class QueryOrderer | postgrest-csharp",
    "keywords": "Class QueryOrderer Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class QueryOrderer Inheritance object QueryOrderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryOrderer(string?, string, Ordering, NullPosition) public QueryOrderer(string? foreignTable, string column, Constants.Ordering ordering, Constants.NullPosition nullPosition) Parameters foreignTable string column string ordering Constants.Ordering nullPosition Constants.NullPosition Properties Column public string Column { get; } Property Value string ForeignTable public string? ForeignTable { get; } Property Value string NullPosition public Constants.NullPosition NullPosition { get; } Property Value Constants.NullPosition Ordering public Constants.Ordering Ordering { get; } Property Value Constants.Ordering"
  },
  "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.RemoteModelsPopulatedEventHandler.html": {
    "href": "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.RemoteModelsPopulatedEventHandler.html",
    "title": "Delegate CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler | postgrest-csharp",
    "keywords": "Delegate CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler Namespace Supabase.Postgrest.Requests Assembly Supabase.Postgrest.dll Handler for when Remote Models have been populated public delegate void CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler(CacheBackedRequest<TModel> sender) Parameters sender CacheBackedRequest<TModel> Handler for when Remote Models have been populated"
  },
  "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.html": {
    "href": "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.html",
    "title": "Class CacheBackedRequest<TModel> | postgrest-csharp",
    "keywords": "Class CacheBackedRequest<TModel> Namespace Supabase.Postgrest.Requests Assembly Supabase.Postgrest.dll Represents a Request that is backed by a caching strategy. public class CacheBackedRequest<TModel> : INotifyPropertyChanged where TModel : BaseModel, new() Type Parameters TModel Inheritance object CacheBackedRequest<TModel> Implements INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheBackedRequest(IPostgrestTableWithCache<TModel>, IPostgrestCacheProvider, Func<Task<ModeledResponse<TModel>>>) Constructs a Cache Backed Request that automatically populates itself using the Cache provider (if possible). public CacheBackedRequest(IPostgrestTableWithCache<TModel> instance, IPostgrestCacheProvider cacheProvider, Func<Task<ModeledResponse<TModel>>> remoteRequestAction) Parameters instance IPostgrestTableWithCache<TModel> cacheProvider IPostgrestCacheProvider remoteRequestAction Func<Task<ModeledResponse<TModel>>> Properties CacheTime The stored cache time in UTC. public DateTime? CacheTime { get; protected set; } Property Value DateTime? Models The Models returned either by Cache Hit or Remote Response public List<TModel> Models { get; set; } Property Value List<TModel> Response The response (if applicable) from Supabase.Postgrest.Requests.CacheBackedRequest<TModel>._remoteRequestAction public ModeledResponse<TModel>? Response { get; protected set; } Property Value ModeledResponse<TModel> WasCacheHit If the cache was hit for this request. public bool WasCacheHit { get; protected set; } Property Value bool WasResponseCached If the response was stored in cache. public bool WasResponseCached { get; protected set; } Property Value bool Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler RemoteModelsPopulated Invoked when Remote Models have been populated on this object. public event CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler? RemoteModelsPopulated Event Type CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler"
  },
  "api/Supabase.Postgrest.Requests.html": {
    "href": "api/Supabase.Postgrest.Requests.html",
    "title": "Namespace Supabase.Postgrest.Requests | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Requests Classes CacheBackedRequest<TModel> Represents a Request that is backed by a caching strategy. Delegates CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler Handler for when Remote Models have been populated"
  },
  "api/Supabase.Postgrest.Responses.BaseResponse.html": {
    "href": "api/Supabase.Postgrest.Responses.BaseResponse.html",
    "title": "Class BaseResponse | postgrest-csharp",
    "keywords": "Class BaseResponse Namespace Supabase.Postgrest.Responses Assembly Supabase.Postgrest.dll A wrapper class from which all Responses derive. public class BaseResponse Inheritance object BaseResponse Derived ModeledResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseResponse(ClientOptions, HttpResponseMessage?, string?) public BaseResponse(ClientOptions clientOptions, HttpResponseMessage? responseMessage, string? content) Parameters clientOptions ClientOptions responseMessage HttpResponseMessage content string Properties ClientOptions [JsonIgnore] public ClientOptions ClientOptions { get; set; } Property Value ClientOptions Content [JsonIgnore] public string? Content { get; set; } Property Value string ResponseMessage [JsonIgnore] public HttpResponseMessage? ResponseMessage { get; set; } Property Value HttpResponseMessage"
  },
  "api/Supabase.Postgrest.Responses.ModeledResponse-1.html": {
    "href": "api/Supabase.Postgrest.Responses.ModeledResponse-1.html",
    "title": "Class ModeledResponse<T> | postgrest-csharp",
    "keywords": "Class ModeledResponse<T> Namespace Supabase.Postgrest.Responses Assembly Supabase.Postgrest.dll A representation of a successful Postgrest response that transforms the string response into a C# Modelled response. public class ModeledResponse<T> : BaseResponse where T : BaseModel, new() Type Parameters T Inheritance object BaseResponse ModeledResponse<T> Inherited Members BaseResponse.ResponseMessage BaseResponse.Content BaseResponse.ClientOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeledResponse(BaseResponse, JsonSerializerSettings, Func<Dictionary<string, string>>?, bool) public ModeledResponse(BaseResponse baseResponse, JsonSerializerSettings serializerSettings, Func<Dictionary<string, string>>? getHeaders = null, bool shouldParse = true) Parameters baseResponse BaseResponse serializerSettings JsonSerializerSettings getHeaders Func<Dictionary<string, string>> shouldParse bool Properties Model The first model in the response. public T? Model { get; } Property Value T Models A list of models in the response. public List<T> Models { get; } Property Value List<T>"
  },
  "api/Supabase.Postgrest.Responses.html": {
    "href": "api/Supabase.Postgrest.Responses.html",
    "title": "Namespace Supabase.Postgrest.Responses | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest.Responses Classes BaseResponse A wrapper class from which all Responses derive. ModeledResponse<T> A representation of a successful Postgrest response that transforms the string response into a C# Modelled response."
  },
  "api/Supabase.Postgrest.Table-1.html": {
    "href": "api/Supabase.Postgrest.Table-1.html",
    "title": "Class Table<TModel> | postgrest-csharp",
    "keywords": "Class Table<TModel> Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Class created from a model derived from BaseModel that can generate query requests to a Postgrest Endpoint. Representative of a USE $TABLE command. public class Table<TModel> : IPostgrestTable<TModel>, IGettableHeaders where TModel : BaseModel, new() Type Parameters TModel Model derived from BaseModel. Inheritance object Table<TModel> Implements IPostgrestTable<TModel> IGettableHeaders Derived TableWithCache<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Table(string, JsonSerializerSettings, ClientOptions?) Typically called from the Client new Client.Table<ModelType> public Table(string baseUrl, JsonSerializerSettings serializerSettings, ClientOptions? options = null) Parameters baseUrl string Api Endpoint (ex: \"http://localhost:8000\"), no trailing slash required. serializerSettings JsonSerializerSettings options ClientOptions Optional client configuration. Properties BaseUrl API Base Url for subsequent calls. public string BaseUrl { get; } Property Value string GetHeaders An executable Func that returns a dictionary of headers to be appended onto a request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> TableName Name of the Table parsed by the Model. public string TableName { get; } Property Value string Methods And(List<IPostgrestQueryFilter>) Adds an AND Filter to the current query args. public IPostgrestTable<TModel> And(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Clear() Clears currently defined query values. public void Clear() Columns(Expression<Func<TModel, object[]>>) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns public IPostgrestTable<TModel> Columns(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Returns IPostgrestTable<TModel> Columns(string[]) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns public IPostgrestTable<TModel> Columns(string[] columns) Parameters columns string[] Returns IPostgrestTable<TModel> Count(CountType, CancellationToken) Returns ONLY a count from the specified query. See: https://postgrest.org/en/v7.0.0/api.html?highlight=count public Task<int> Count(Constants.CountType type, CancellationToken cancellationToken = default) Parameters type Constants.CountType The kind of count. cancellationToken CancellationToken Returns Task<int> Delete(QueryOptions?, CancellationToken) Executes a delete request using the defined query params on the current instance. public Task Delete(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task Delete(TModel, QueryOptions?, CancellationToken) Executes a delete request using the model's primary key as the filter for the request. public Task<ModeledResponse<TModel>> Delete(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Filter<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Add a filter to a query request using a predicate to select column. public IPostgrestTable<TModel> Filter<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a columns from the Model to be returned op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion Exceptions ArgumentException Filter<TCriterion>(string, Operator, TCriterion?) Add a Filter to a query request public IPostgrestTable<TModel> Filter<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string Column Name in Table. op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion GenerateUrl() Generates the encoded URL with defined query parameters that will be sent to the Postgrest API. public string GenerateUrl() Returns string Get(CancellationToken) Executes the query using the defined filters on the current instance. public Task<ModeledResponse<TModel>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Insert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes a BULK INSERT query using the defined query params on the current instance. public Task<ModeledResponse<TModel>> Insert(ICollection<TModel> models, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters models ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Insert(TModel, QueryOptions?, CancellationToken) Executes an INSERT query using the defined query params on the current instance. public Task<ModeledResponse<TModel>> Insert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Limit(int, string?) Sets a limit with an optional foreign table reference. public IPostgrestTable<TModel> Limit(int limit, string? foreignTableName = null) Parameters limit int foreignTableName string Returns IPostgrestTable<TModel> Match(Dictionary<string, string>) Finds all rows whose columns match the specified query object. public IPostgrestTable<TModel> Match(Dictionary<string, string> query) Parameters query Dictionary<string, string> The object to filter with, with column names as keys mapped to their filter values. Returns IPostgrestTable<TModel> Match(TModel) Fills in query parameters based on a given model's primary key(s). public IPostgrestTable<TModel> Match(TModel model) Parameters model TModel A model with a primary key column Returns IPostgrestTable<TModel> Not(IPostgrestQueryFilter) Adds a NOT filter to the current query args. public IPostgrestTable<TModel> Not(IPostgrestQueryFilter filter) Parameters filter IPostgrestQueryFilter Returns IPostgrestTable<TModel> Not(Expression<Func<TModel, object>>, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. public IPostgrestTable<TModel> Not(Expression<Func<TModel, object>> predicate, Constants.Operator op, Dictionary<string, object> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not(string, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. public IPostgrestTable<TModel> Not(string columnName, Constants.Operator op, Dictionary<string, object> criteria) Parameters columnName string op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>>, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); public IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, List<TCriterion> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); public IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); public IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, List<TCriterion> criteria) Parameters columnName string op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); public IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Offset(int, string?) Sets an offset with an optional foreign table reference. public IPostgrestTable<TModel> Offset(int offset, string? foreignTableName = null) Parameters offset int foreignTableName string Returns IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>>) Set an onConflict query parameter for UPSERTing on a column that has a UNIQUE constraint using a linq predicate. public IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>> predicate) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. Returns IPostgrestTable<TModel> OnConflict(string) By specifying the onConflict query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. public IPostgrestTable<TModel> OnConflict(string columnName) Parameters columnName string Returns IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter>) Adds a OR Filter to the current query args. public IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Order(Expression<Func<TModel, object>>, Ordering, NullPosition) Adds an ordering to the current query args using a predicate function. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . public IPostgrestTable<TModel> Order(Expression<Func<TModel, object>> predicate, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters predicate Expression<Func<TModel, object>> ordering Constants.Ordering Expects a columns from the Model to be returned nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . public IPostgrestTable<TModel> Order(string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters column string Column Name ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . public IPostgrestTable<TModel> Order(string foreignTable, string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters foreignTable string column string ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Range(int) Sets a FROM range, similar to a StartAt query. public IPostgrestTable<TModel> Range(int from) Parameters from int Returns IPostgrestTable<TModel> Range(int, int) Sets a bounded range to the current query. public IPostgrestTable<TModel> Range(int from, int to) Parameters from int to int Returns IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>>) Select columns using a predicate function. For example: Table<Movie>().Select(x => new[] { x.Id, x.Name, x.CreatedAt }).Get(); public IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Expects an array of columns from the Model to be returned. Returns IPostgrestTable<TModel> Select(string) Select columns for query. public IPostgrestTable<TModel> Select(string columnQuery) Parameters columnQuery string Returns IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>>) Specifies a KeyValuePair to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. public IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>> keyValuePairExpression) Parameters keyValuePairExpression Expression<Func<TModel, KeyValuePair<object, object>>> Returns IPostgrestTable<TModel> Exceptions ArgumentException Set(Expression<Func<TModel, object>>, object?) Specifies a key and value to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. public IPostgrestTable<TModel> Set(Expression<Func<TModel, object>> keySelector, object? value) Parameters keySelector Expression<Func<TModel, object>> value object Returns IPostgrestTable<TModel> Single(CancellationToken) Executes a query that expects to have a single object returned, rather than returning list of models it will return a single model. public Task<TModel?> Single(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<TModel> Update(QueryOptions?, CancellationToken) Calls an Update function after Set has been called. public Task<ModeledResponse<TModel>> Update(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Exceptions ArgumentException Update(TModel, QueryOptions?, CancellationToken) Executes an UPDATE query using the defined query params on the current instance. public Task<ModeledResponse<TModel>> Update(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed response from the database. Upsert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. public Task<ModeledResponse<TModel>> Upsert(ICollection<TModel> model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Upsert(TModel, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. public Task<ModeledResponse<TModel>> Upsert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Where(Expression<Func<TModel, bool>>) Filter a query based on a predicate function. Note: Chaining multiple Where(Expression<Func<TModel, bool>>) calls will be parsed as an \"AND\" query. Examples: Table<Movie>().Where(x => x.Name == \"Top Gun\").Get(); Table<Movie>().Where(x => x.Name == \"Top Gun\" || x.Name == \"Mad Max\").Get(); Table<Movie>().Where(x => x.Name.Contains(\"Gun\")).Get(); Table<Movie>().Where(x => x.CreatedAt <= new DateTime(2022, 08, 21)).Get(); Table<Movie>().Where(x => x.Id > 5 && x.Name.Contains(\"Max\")).Get(); public IPostgrestTable<TModel> Where(Expression<Func<TModel, bool>> predicate) Parameters predicate Expression<Func<TModel, bool>> Returns IPostgrestTable<TModel>"
  },
  "api/Supabase.Postgrest.TableWithCache-1.html": {
    "href": "api/Supabase.Postgrest.TableWithCache-1.html",
    "title": "Class TableWithCache<T> | postgrest-csharp",
    "keywords": "Class TableWithCache<T> Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Represents a table constructed with a IPostgrestCacheProvider public class TableWithCache<T> : Table<T>, IPostgrestTableWithCache<T>, IPostgrestTable<T>, IGettableHeaders where T : BaseModel, new() Type Parameters T Inheritance object Table<T> TableWithCache<T> Implements IPostgrestTableWithCache<T> IPostgrestTable<T> IGettableHeaders Inherited Members Table<T>.BaseUrl Table<T>.TableName Table<T>.GetHeaders Table<T>.Filter<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) Table<T>.Filter<TCriterion>(string, Constants.Operator, TCriterion) Table<T>.Not(IPostgrestQueryFilter) Table<T>.Not<TCriterion>(string, Constants.Operator, TCriterion) Table<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) Table<T>.Not<TCriterion>(string, Constants.Operator, List<TCriterion>) Table<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, List<TCriterion>) Table<T>.Not(string, Constants.Operator, Dictionary<string, object>) Table<T>.Not(Expression<Func<T, object>>, Constants.Operator, Dictionary<string, object>) Table<T>.And(List<IPostgrestQueryFilter>) Table<T>.Or(List<IPostgrestQueryFilter>) Table<T>.Match(T) Table<T>.Match(Dictionary<string, string>) Table<T>.Order(Expression<Func<T, object>>, Constants.Ordering, Constants.NullPosition) Table<T>.Order(string, Constants.Ordering, Constants.NullPosition) Table<T>.Order(string, string, Constants.Ordering, Constants.NullPosition) Table<T>.Range(int) Table<T>.Range(int, int) Table<T>.Select(string) Table<T>.Select(Expression<Func<T, object[]>>) Table<T>.Where(Expression<Func<T, bool>>) Table<T>.Limit(int, string) Table<T>.OnConflict(string) Table<T>.OnConflict(Expression<Func<T, object>>) Table<T>.Columns(string[]) Table<T>.Columns(Expression<Func<T, object[]>>) Table<T>.Offset(int, string) Table<T>.Insert(T, QueryOptions, CancellationToken) Table<T>.Insert(ICollection<T>, QueryOptions, CancellationToken) Table<T>.Upsert(T, QueryOptions, CancellationToken) Table<T>.Upsert(ICollection<T>, QueryOptions, CancellationToken) Table<T>.Set(Expression<Func<T, object>>, object) Table<T>.Set(Expression<Func<T, KeyValuePair<object, object>>>) Table<T>.Update(QueryOptions, CancellationToken) Table<T>.Update(T, QueryOptions, CancellationToken) Table<T>.Delete(QueryOptions, CancellationToken) Table<T>.Delete(T, QueryOptions, CancellationToken) Table<T>.Count(Constants.CountType, CancellationToken) Table<T>.Single(CancellationToken) Table<T>.GenerateUrl() Table<T>.Clear() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TableWithCache(string, IPostgrestCacheProvider, JsonSerializerSettings, ClientOptions?) public TableWithCache(string baseUrl, IPostgrestCacheProvider cacheProvider, JsonSerializerSettings serializerSettings, ClientOptions? options = null) Parameters baseUrl string cacheProvider IPostgrestCacheProvider serializerSettings JsonSerializerSettings options ClientOptions Properties CacheProvider Represents a caching provider to be used with Get Requests. protected IPostgrestCacheProvider CacheProvider { get; } Property Value IPostgrestCacheProvider Methods Get(CancellationToken) public Task<CacheBackedRequest<T>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<CacheBackedRequest<T>>"
  },
  "api/Supabase.Postgrest.html": {
    "href": "api/Supabase.Postgrest.html",
    "title": "Namespace Supabase.Postgrest | postgrest-csharp",
    "keywords": "Namespace Supabase.Postgrest Classes Client ClientOptions Options that can be passed to the Client configuration Constants FullTextSearchConfig Configuration Object for Full Text Search. API Reference: http://postgrest.org/en/v7.0.0/api.html?highlight=full%20text%20search#full-text-search Index Represent a type can be used to index a collection either from the start or the end. IntRange Represent a range has start and end indexes. PostgrestContractResolver A custom resolver that handles mapping column names and property names as well as handling the conversion of Postgrest Ranges to a C# Range. QueryFilter QueryFilter<TModel, TCriterion> Allow for the expression of a query filter with linq expressions. QueryOptions QueryOrderer TableWithCache<T> Represents a table constructed with a IPostgrestCacheProvider Table<TModel> Class created from a model derived from BaseModel that can generate query requests to a Postgrest Endpoint. Representative of a USE $TABLE command. Enums Constants.CountType See: https://postgrest.org/en/v7.0.0/api.html?highlight=count#estimated-count Constants.NullPosition See: https://postgrest.org/en/v7.0.0/api.html?highlight=nulls%20first#ordering Constants.Operator See: https://postgrest.org/en/v7.0.0/api.html?highlight=operators#operators Constants.Ordering QueryOptions.CountType QueryOptions.DuplicateResolutionType QueryOptions.ReturnType Delegates OnRequestPreparedEventHandler Delegate representing the request to be sent to the remote server."
  },
  "index.html": {
    "href": "index.html",
    "title": "postgrest-csharp | postgrest-csharp",
    "keywords": "postgrest-csharp Postgrest-csharp is written primarily as a helper library for supabase/supabase-csharp, however, it should be easy enough to use outside of the supabase ecosystem. The bulk of this library is a translation and c-sharp-ification of the supabase/postgrest-js library."
  }
}